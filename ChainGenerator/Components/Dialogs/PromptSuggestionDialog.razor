@using System.Text
@inject IServiceProvider ServiceProvider

<MudDialog>
    <DialogContent>
        @if (selectableWidgets == null || selectableWidgets.Count == 0)
        {
            <MudText>No widgets available</MudText>
        }
        else
        {
            <MudText>Select the widgets you want this prompt to use</MudText>
            @foreach (var selectableWidget in selectableWidgets)
            {
                <MudCheckBox @bind-Value="@selectableWidget.IsSelected" Label="@selectableWidget.WidgetGeneratorModel?.Title" />
            }
        }

        @if (promptSuggestionSet)
        {
            <MudText>@promptSuggestion</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => MudDialog.Cancel())">Cancel</MudButton>
        <MudButton OnClick="@(() => GenerateSuggestion())">Generate Suggestion</MudButton>
        <MudButton Disabled="!promptSuggestionSet" OnClick="@(() => Submit())">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog {get; set; }

    [Parameter] public ChainGeneratorPageModel? ChainGeneratorPageModel { get; set; }

    private List<SelectableWidget> selectableWidgets { get; set; } = new();
    private string promptSuggestion;
    private bool promptSuggestionSet => !string.IsNullOrWhiteSpace(promptSuggestion);

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            selectableWidgets = ChainGeneratorPageModel?.WidgetGeneratorModels?.Where(w => w.IsTextGenerator).Select(w => new SelectableWidget() { 
                IsSelected = false, 
                WidgetGeneratorModel = w
            }).ToList();
            StateHasChanged();
        }
    }

    void Submit()
    {
        if (promptSuggestionSet)
        {
            MudDialog.Close(DialogResult.Ok(promptSuggestion));
        }
    }

    async Task GenerateSuggestion()
    {
        var selectedWidgets = selectableWidgets.Where(w => w.IsSelected);
        var updateTasks = selectedWidgets
            .Where(widget => string.IsNullOrWhiteSpace(widget.WidgetGeneratorModel.PromptIntent))
            .Select(widget => UpdatePromptIntent(widget.WidgetGeneratorModel));

        await Task.WhenAll(updateTasks);

        promptSuggestion = (await GetPromptSuggestion(selectedWidgets)).Trim();
    }

    async Task<string> GetPromptSuggestion(IEnumerable<SelectableWidget> selectedWidgets)
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var chatSession = scope.ServiceProvider.GetRequiredService<ChatSession>();  // Get the chat session service
            var suggestionPrompt = $"Given the following intents: \n```\n{string.Join("\n```\n```\n", selectedWidgets.Select(x => $"Reference: {{{{{x.WidgetGeneratorModel.Title}}}}}\nIntent: {x.WidgetGeneratorModel.PromptIntent}"))}\n```\nLook at all of the above intents and create a new prompt for an LLM that will use ideas and branch off to explore a new idea related to the intents. Format the new prompt where you reference the other intents. For example, for the first intent reference {{{{{selectedWidgets.First().WidgetGeneratorModel.Title}}}}} a new prompt for the LLM could look like: \"Explain more about what makes {{{{{selectedWidgets.First().WidgetGeneratorModel.Title}}}}} interesting and unique\". Only return the new prompt and be sure to include references in curly brackets";
            return await chatSession.GetResponse(suggestionPrompt);
        }
    }

    async Task UpdatePromptIntent(WidgetGeneratorModel widgetGeneratorModel)
    {
        using (var scope = ServiceProvider.CreateScope())
        {            
            var chatSession = scope.ServiceProvider.GetRequiredService<ChatSession>();  // Get the chat session service
            widgetGeneratorModel.PromptIntent = await chatSession.GetResponse($"Can you give me a brief summary of what this is trying to accomplish and it's intent? ```{widgetGeneratorModel.Prompt}```");
        }
    }

    private class SelectableWidget
    {
        public bool IsSelected { get; set; }
        public WidgetGeneratorModel WidgetGeneratorModel { get; set; }
    }
}
