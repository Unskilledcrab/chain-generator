@page "/"  
@using System.Text.Json  

@inject IJSRuntime JSRuntime

<!-- Text field for entering the new generator title -->
<MudTextField @bind-Value="newGeneratorTitle"
              @onkeydown="@OnKeyDown"
              Immediate="true"
              Label="New Generator Title"
              HelperText=""
              Variant="Variant.Outlined"
              AdornmentIcon="@Icons.Material.Filled.Add"
              Adornment="Adornment.End"
              OnAdornmentClick="Submit" />
<br />

<!-- File upload component for importing pageModel.WidgetGeneratorModels -->
<MudFileUpload T="IBrowserFile" FilesChanged="Import">
    <ButtonTemplate>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton StartIcon="@Icons.Material.Filled.Save" aria-label="delete" OnClick="Download">Save Generators</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.UploadFile" aria-label="upload file" for="@context.Id" HtmlTag="label">Import Generator</MudButton>
        </MudButtonGroup>
    </ButtonTemplate>
</MudFileUpload>
<br />

<!-- Grid for displaying the pageModel.WidgetGeneratorModels -->
<MudGrid Justify="Justify.SpaceEvenly">
    @foreach (var generator in pageModel.WidgetGeneratorModels)
    {
        <MudItem>
            <WidgetGenerator WidgetGeneratorModel="@generator"
                             OnRefresh="OnGeneratorRefresh"
                             OnTitleEdited="OnTitleEdited"
                             OnDelete="() => OnDelete(generator)"
                             Parent="@this" />
        </MudItem>
    }
</MudGrid>

@code {
    private List<WidgetGenerator> widgetGenerators = new();
    private ChainGeneratorPageModel pageModel = new();

    // Reference to the JavaScript module
    private IJSObjectReference? module;
    // Title for the new generator
    private string newGeneratorTitle { get; set; } = "";

    // Method called after the component is rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Import the JavaScript module
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/chainGenerator.js");
        }
    }

    // Method called when a key is pressed in the text field
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            // Submit the form if the Enter key is pressed
            await Submit();
        }
    }

    // Method for importing pageModel.WidgetGeneratorModels from a file
    private async Task Import(IBrowserFile browserFile)
    {
        // Read the file and deserialize it into a list of pageModel.WidgetGeneratorModels
        var content = await new StreamReader(browserFile.OpenReadStream()).ReadToEndAsync();

        // Try to deserialize the content as a ChainGeneratorPageModel
        try
        {
            var newPageModel = JsonSerializer.Deserialize<ChainGeneratorPageModel>(content);
            if (newPageModel != null)
            {
                pageModel = newPageModel;
                return;
            }
        }
        catch (JsonException)
        {
            // If the deserialization fails, try to deserialize the content as a list of pageModel.WidgetGeneratorModels
            var newGenerators = JsonSerializer.Deserialize<List<WidgetGeneratorModel>>(content);
            if (newGenerators != null)
            {
                pageModel.WidgetGeneratorModels.Clear();
                pageModel.WidgetGeneratorModels.AddRange(newGenerators);
            }
        }

    }

    // Method for downloading the pageModel.WidgetGeneratorModels as a JSON file
    private async Task Download()
    {
        var json = JsonSerializer.Serialize(pageModel);
        await module.InvokeVoidAsync("download", json, "generator.json", "application/json");
    }

    // Method for submitting the form
    private async Task Submit()
    {
        var originalPrompt = newGeneratorTitle;
        newGeneratorTitle = GetUniqueTitle(newGeneratorTitle);

        // Add a new generator with the unique title
        pageModel.WidgetGeneratorModels.Add(new WidgetGeneratorModel
            {
                Title = newGeneratorTitle,
            });
        newGeneratorTitle = originalPrompt;
    }

    // Method for getting a unique title
    private string GetUniqueTitle(string title)
    {
        if (widgetGenerators.Any(x => x.WidgetGeneratorModel.Title == title))
        {
            if (!title.EndsWith(" (1)"))
            {
                title += " (1)";
            }
            var i = 2;
            while (widgetGenerators.Any(x => x.WidgetGeneratorModel.Title == title))
            {
                title = title.Replace($" ({i - 1})", $" ({i})");
                i++;
            }
        }
        return title;
    }

    // Method for adding a widget generator
    public void AddWidgetGenerator(WidgetGenerator WidgetGenerator)
    {
        widgetGenerators.Add(WidgetGenerator);
    }

    // Method for deleting a generator
    private void OnDelete(WidgetGeneratorModel WidgetGeneratorModel)
    {
        pageModel.WidgetGeneratorModels.Remove(WidgetGeneratorModel);
    }

    // Method for refreshing a generator
    private async Task OnGeneratorRefresh(WidgetGenerator refreshTargetWidgetGenerator)
    {
        await InternalOnGeneratorRefresh(refreshTargetWidgetGenerator);
    }

    // Method for editing the title of a generator
    private void OnTitleEdited((string previousTitle, string newTitle) title)
    {
        foreach (var generator in pageModel.WidgetGeneratorModels)
        {
            generator.Prompt = generator.Prompt?.Replace("{{" + title.previousTitle + "}}", "{{" + title.newTitle + "}}");
        }
    }

    // Internal method for refreshing a generator
    private async Task InternalOnGeneratorRefresh(WidgetGenerator refreshTargetWidgetGenerator, List<WidgetGenerator>? alreadyRefershedWidgets = null)
    {
        // Create a cache list of already refreshed widgets to prevent infinite loops
        alreadyRefershedWidgets ??= new List<WidgetGenerator>();
        if (alreadyRefershedWidgets.Contains(refreshTargetWidgetGenerator))
        {
            return;
        }
        // Add the current widget to the cache list to prevent infinite loops
        alreadyRefershedWidgets.Add(refreshTargetWidgetGenerator);

        // Reset the generated prompt in case any references were updated
        refreshTargetWidgetGenerator.WidgetGeneratorModel.GeneratedPrompt = refreshTargetWidgetGenerator.WidgetGeneratorModel.Prompt;

        // Set the target widgets generated prompt from the references and generate
        foreach (var referencedWidgetTitle in refreshTargetWidgetGenerator.WidgetGeneratorModel.GetGeneratorTitleReferences())
        {
            foreach (var generator in pageModel.WidgetGeneratorModels)
            {
                // If the generator title matches the reference, replace this pageModel.WidgetGeneratorModels reference with the final output (usually the generated output of the referenced generator)
                if (generator.Title == referencedWidgetTitle)
                {
                    refreshTargetWidgetGenerator.WidgetGeneratorModel.GeneratedPrompt = refreshTargetWidgetGenerator.WidgetGeneratorModel.GeneratedPrompt?.Replace("{{" + referencedWidgetTitle + "}}", generator.GeneratedOutput);
                }
            }
        }
        // Now that the prompt is updated, generate the final output
        await refreshTargetWidgetGenerator.Refresh();

        // See if any other widget references this one because it should now be re-generated if it does
        var referenceTargetTasks = new List<Task>();
        foreach (var WidgetGenerator in widgetGenerators)
        {
            if (WidgetGenerator.WidgetGeneratorModel.GetGeneratorTitleReferences().Contains(refreshTargetWidgetGenerator.WidgetGeneratorModel.Title))
            {
                referenceTargetTasks.Add(InternalOnGeneratorRefresh(WidgetGenerator, alreadyRefershedWidgets));
            }
        }
        await Task.WhenAll(referenceTargetTasks);
    }
}
