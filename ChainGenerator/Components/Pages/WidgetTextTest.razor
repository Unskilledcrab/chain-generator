@page "/widgettexttest"


<MudTextField @bind-Value="userPrompt" @onkeydown="@OnKeyDown" Immediate="true" Label="New Generator Title" HelperText="" Variant="Variant.Outlined" />
<br />
<MudButton ButtonType="ButtonType.Submit"
           Variant="Variant.Filled"
           Color="Color.Primary"
           OnClick="@(() => Submit())"
           Class="ml-auto">
    Add Generator
</MudButton>
<br />

<MudGrid Justify="Justify.SpaceEvenly">
@foreach (var generator in generators)
{
    <MudItem xs="4">
        <WidgetText 
            WidgetTextGenerator="@generator" 
            OnRefresh="OnGeneratorRefresh" 
            OnDelete="() => OnDelete(generator)"
            Parent="@this" />
    </MudItem>
}
</MudGrid>



@code {
    private List<WidgetText> widgetTexts = new List<WidgetText>();
    private List<WidgetTextGenerator> generators = new List<WidgetTextGenerator>
    {
        new WidgetTextGenerator
        {
            Title = "Test",
        },
    };


    private string userPrompt { get; set; } = "";

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Submit();
        }
    }

    private async Task Submit()
    {
        generators.Add(new WidgetTextGenerator
        {
            Title = userPrompt,
        });
    }

    public void AddWidgetText(WidgetText widgetText)
    {
        widgetTexts.Add(widgetText);
    }

    private void OnDelete(WidgetTextGenerator widgetTextGenerator)
    {
        generators.Remove(widgetTextGenerator);
    }

    private async Task OnGeneratorRefresh(WidgetText refreshTargetWidgetText)
    {
        await InternalOnGeneratorRefresh(refreshTargetWidgetText);
    }

    private async Task InternalOnGeneratorRefresh(WidgetText refreshTargetWidgetText, List<WidgetText>? alreadyRefershedWidgets = null)
    {
        alreadyRefershedWidgets ??= new List<WidgetText>();
        if (alreadyRefershedWidgets.Contains(refreshTargetWidgetText))
        {
            return;
        }
        alreadyRefershedWidgets.Add(refreshTargetWidgetText);

        refreshTargetWidgetText.WidgetTextGenerator.GeneratedPrompt = refreshTargetWidgetText.WidgetTextGenerator.Prompt;
        foreach (var referencedWidget in refreshTargetWidgetText.WidgetTextGenerator.GetGeneratorReferences())
        {
            foreach (var generator in generators)
            {
                if (generator.Title == referencedWidget)
                {
                    refreshTargetWidgetText.WidgetTextGenerator.GeneratedPrompt = refreshTargetWidgetText.WidgetTextGenerator.GeneratedPrompt.Replace("{{" + referencedWidget + "}}", generator.GetFinalOutput());
                }
            }
        }
        await refreshTargetWidgetText.Refresh();

        var referenceTargetTasks = new List<Task>();
        foreach (var widgetText in widgetTexts)
        {
            if (widgetText.WidgetTextGenerator.GetGeneratorReferences().Contains(refreshTargetWidgetText.WidgetTextGenerator.Title))
            {
                referenceTargetTasks.Add(InternalOnGeneratorRefresh(widgetText, alreadyRefershedWidgets));
            }
        }
        await Task.WhenAll(referenceTargetTasks);
    }
}
